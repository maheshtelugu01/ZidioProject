package com.nt.serviceimpl;

import java.time.LocalDateTime;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Service;

import com.nt.client.SubscriptionFindClient;
import com.nt.client.UserFindClient;
import com.nt.dto.NotificationDto;
import com.nt.dto.SubscriptionDto;
import com.nt.dto.UserPaymentStatusDto;
import com.nt.dto.UserSubscriptionStatusDto;
import com.nt.entity.User;
import com.nt.entity.UserPaymentStatus;
import com.nt.entity.UserSubscriptionStatus;
import com.nt.enums.SubscriptionStatus;
import com.nt.repository.UserPaymentStatusRepository;
import com.nt.repository.UserSubscriptionStatusRepository;
import com.nt.service.IUserPaymentStatusService;
import com.nt.service.IUserSubscriptionStatusService;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class UserSubscriptionStatusServiceImpl implements IUserSubscriptionStatusService {
	@Autowired
	private UserSubscriptionStatusRepository statusRepo;
	@Autowired
	private ModelMapper mapper;
	@Autowired
	private UserFindClient userClient;
	@Autowired
	private JmsTemplate template;
	@Autowired
	private SubscriptionFindClient planClient;

	@Override
	public String activateSubscription(Long planId) {
		User user=userClient.findUser();
		SubscriptionDto dto=planClient.findSubscription(planId);
		Optional<UserSubscriptionStatus> activeSub=statusRepo.findByEmailAndStatus(user.getEmail(),SubscriptionStatus.ACTIVE);
		UserSubscriptionStatus status;
		if(activeSub.isPresent()) {
			status=activeSub.get();
			status.setPlanId(planId);
			status.setStatus(SubscriptionStatus.ACTIVE);
			status.setSubscriptionStart(LocalDateTime.now());
			status.setSubscriptionEnd(LocalDateTime.now().plusDays(dto.getDurationDays()));
			status.setUsedApplications(0);
		}
		else {
			status=new UserSubscriptionStatus();
			status.setEmail(user.getEmail());
			status.setStatus(SubscriptionStatus.ACTIVE);
			status.setSubscriptionStart(LocalDateTime.now());
			status.setSubscriptionEnd(LocalDateTime.now().plusDays(dto.getDurationDays()));
			status.setUsedApplications(0);
		}
		 
		template.convertAndSend("notification-topic",new NotificationDto(user.getEmail(),"Your Subscription has '"+status.getStatus()+"' Updated..","USERSUBSCRIPTIONSTATUS-SERVICE"));
		return "your Subscription Updated as Active";
	}
	@Override
	public Optional<UserSubscriptionStatusDto> getStatusByUserEmail(String email) {
		User user=userClient.findUser();
		return statusRepo.findByEmail(user.getEmail()).map(status->mapper.map(status,UserPaymentStatusDto.class));
	}
	@Override
	public UserSubscriptionStatusDto getActiveSubscriptionByEmail(String email) {
		LocalDateTime now=LocalDateTime.now();
		return statusRepo.findByEmailAndSubscriptionStartBeforeAndSubscriptionEndAfter(email, now, now).orElseThrow(()->
		new RuntimeException("No Active Subscription"));
	}
	

}
